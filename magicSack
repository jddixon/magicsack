#!/usr/bin/python3
#
# ~/dev/py/magicsack/magicSack

import binascii, getpass, json, os, shutil, sys
from pbkdf2         import PBKDF2       # note name of package is u/c
from Crypto.Cipher  import AES
from Crypto.Hash      import SHA        # presumably SHA1
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_PSS
from argparse       import ArgumentParser

from xlattice.crypto import AES_BLOCK_SIZE, pkcs7Padding, stripPKCS7Padding
from xlattice.lfs   import mkdir_p
from xlattice.ui    import confirmYorN, passwdStrength
from magicsack      import *


def makeListing(args):

    testing     = args.testing
    uDir        = args.uDir
    verbose     = args.verbose

    # XXX STUB XX


def verifyPassPhrase(globals, passPhrase):
    ok = True
    # .magicsack directory must exist
    # XXX STUB XXX
    return ok

def handleInit(globals, passPhrase):

    while True:
        print(("passphrase is %s" % passwdStrength(passPhrase)))
        if confirmYorN('ok to continue? '):
            break
        passPhrase = getpass.getpass('new passphrase: ')
        if not passPhrase or passPhrase == '':
            print('you must supply a passphrase')
            sys.exit(1)

    # Neither the salt nor any IVs need be kept secret.
    salt    = os.urandom(8)
    key     = PBKDF2(passPhrase, salt).read(32)     # 32-byte key
    # iv    = os.urandom(16)                        # 16-byte IV
    # cipher= AES.new(key, AES.MODE_CBC, iv)

    # loop: verify that second passphrase matches first
    pp2     = getpass.getpass("Confirm passphrase: ")
    while pp2 != passPhrase:
        # DEBUG
        print("passphrase: %s" % passPhrase)
        print("pp2:        %s" % pp2)
        # END
        print("second passphrase does not match first passphrase")
        pp2 = getpass.getpass("Confirm passphrase: ")

    # DEBUG
    print("key: %s" % binascii.b2a_hex(key))
    # END

    DESC = 'initialize magickSack'
    parser = ArgumentParser(description=DESC, usage='magicSack init [options]')
    parser.add_argument('-f', '--force', action='store_true',
        help='overwrite any existing configuration')
    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')
    parser.add_argument('-t', '--title', type=str,
        help='name of the magic sack (required)')
    parser.add_argument('-u', '--uDir',
        help='path to uDir (relative to tmp/ if testing)')
    parser.add_argument('-v', '--verbose',  action='store_true',
        help='be chatty')
    args = parser.parse_args()

    # fixups
    appName  = globals.appName
    magicDir = globals.magicDir
    title    = args.title
    uDir     = args.uDir

    if args.testing:
        if magicDir == defaultDir:
            magicDir = os.path.join('tmp', '.magicsack')
        else:
            magicDir = os.path.join('tmp', '.magicsack')

    # sanity checks -------------------------------------------------

    # magicDir --------------------------------------------
    parts = magicDir.split('/')
    for part in parts:
        if part == '.' or part == '..':
            print("magicDir path '%s' may not contain '%s'" % (magicDir, part))
            sys.exit(1)

    if os.path.exists(magicDir):
        if args.force:
            shutil.rmtree(magicDir)
        else:
            print('%s already exists, add -f to continue' % magicDir)
            sys.exit(1)
    else:
        mkdir_p(magicDir, 0o700)

    # title -----------------------------------------------

    if not title or title == '':
        print('please supply a title, a name for your magic sack')
        parser.print_help()
        sys.exit(1)

    # uDir ------------------------------------------------

    if not uDir or uDir == '':
        uDir = os.path.join(magicDir, 'uDir')

    parts = uDir.split('/')
    for part in parts:
        if part == '.' or part == '..':
            print("uDir path '%s' may not contain '%s'" % (uDir, part))
            sys.exit(1)

    if os.path.exists(uDir):
        if args.force:
            shutil.rmtree(uDir)
        else:
            print('%s already exists, add -f to continue' % uDir)
            sys.exit(1)
    else:
        mkdir_p(uDir, 0o700)

    # uDir/tmp --------------------------------------------
    uDirTmp = os.path.join(uDir, 'tmp')
    mkdir_p(uDirTmp, 0o700)

    # convert key to something json can handle
    intSalt = int.from_bytes(salt, byteorder='little')
    # int.to_bytes(length, byteorder) reverses

    # echo back command line args -----------------------------------

    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('magicDir     = ' + str(magicDir))
        print('salt         = ' + str(intSalt))
        print('testing      = ' + str(args.testing))
        print('title        = ' + str(title))
        print('uDir         = ' + str(args.uDir))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # ACTION --------------------------------------------------------

    # write configuration to magicDir ---------------------
    cfg = {'salt':intSalt, 'uDir':uDir}
    jCfg = json.dumps(cfg, indent=2, sort_keys=True)
    # DEBUG
    print("JSON: %s" % jCfg)
    # END
    configFile = os.path.join(magicDir, 'cfg.json')
    with open(configFile, 'w') as f:
        f.write(jCfg)

    # generate two 2048 bit RSA private keys --------------
    ckPriv      = RSA.generate(2048)
    ckPrivPem   = ckPriv.exportKey('PEM')

    skPriv      = RSA.generate(2048)
    skPrivPem   = ckPriv.exportKey('PEM')
    sk          = skPriv.publickey()

    # encrypt keys using AES key --------------------------
    iv          = os.urandom(16)                          # 16-byte IV
    cipher      = AES.new(key, AES.MODE_CBC, iv)
    padding     = pkcs7Padding(ckPrivPem, AES_BLOCK_SIZE)
    ckPrivE     = cipher.encrypt(ckPrivPem + padding)

    iv          = os.urandom(16)
    cipher      = AES.new(key, AES.MODE_CBC, iv)
    padding     = pkcs7Padding(skPrivPem, AES_BLOCK_SIZE)
    skPrivE     = cipher.encrypt(skPrivPem + padding)

    # create an empty build list --------------------------

    # XXX NEED tree, a MerkleTree with two entries
    # tree = ...
    # bld  = BuildList(title, sk, tree)

    # add keys to build list (saving to uDir) -------------

    # sign build list, encrypt, write to disk -------------




def handleDestroy(globals):
    print('destroy: not yet implemented')
    sys.exit(0)

def handleAdd(globals):

    defaultDir = os.path.join(os.getenv('HOME'), '.magicsack')

    DESC = 'add something to magickSack'
    parser = ArgumentParser(description=DESC, usage='magicSack add [options]')
    parser.add_argument('-f', '--force', action='store_true',
        help='overwrite any existing configuration')
    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')
    parser.add_argument('-v', '--verbose',  action='store_true',
        help='be chatty')
    args = parser.parse_args()

    # fixups
    magicDir = args.magicDir
    if args.testing:
        if magicDir == defaultDir:
            magicDir = os.path.join('tmp', '.magicsack')
        else:
            magicDir = os.path.join('tmp', '.magicsack')

    # echo back command line args -----------------------------------

    appName = 'magicSack %s' % __version__
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('justShow     = ' + str(args.justShow))
        print('magicDir     = ' + str(magicDir))
        print('testing      = ' + str(args.testing))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # ACTION --------------------------------------------------------

    # XXX WORKING HERE

    print('add: not yet completelyimplemented')
    sys.exit(0)

def handleList(globals):
    print('list: not yet implemented')
    sys.exit(0)

def handleShow(globals):
    print('show: not yet implemented')
    sys.exit(0)

def handleDrop(globals):
    print('drop: not yet implemented')
    sys.exit(0)

def handleAddPeer(globals):
    print('addPeer: not yet implemented')
    sys.exit(0)

def handleListPeer(globals):
    print('listPeer: not yet implemented')
    sys.exit(0)

def handleDropPeer(globals):
    print('dropPeer: not yet implemented')
    sys.exit(0)

def main():

    #   'globals' is the list of global args
    #   'command' is the first token after that
    #   'subArgs' is a list containing any other arguments found
    # So
    #   sys.args = [sys.argv[0]] + otherArgs

    defaultDir = os.path.join(os.getenv('HOME'), '.magicsack')

    DESC = 'command-line interface to the Magic Sack'
    parser = ArgumentParser(description=DESC, usage='magicSack add [options]')
    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')
    parser.add_argument('-m', '--magicDir', default=defaultDir,
        help='select folder/directory (default=%s)' % defaultDir)
    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')
    parser.add_argument('-v', '--verbose',  action='store_true',
        help='be chatty')
    parser.add_argument('subCommand',
        help='subCommand to be executed')
    parser.add_argument('subArgs', nargs='*',
        help='arguments to subCommand')
    globals = parser.parse_args()

    # fixups
    magicDir = globals.magicDir
    if globals.testing:
        if magicDir == defaultDir:
            magicDir = os.path.join('tmp', '.magicsack')
        else:
            magicDir = os.path.join('tmp', '.magicsack')
        globals.magicDir = magicDir
    if not magicDir or magicDir == '':
        print("magicDir must be specified")
        sys.exit(1)

    # set up the subcommand line ------------------------------------
    sys.argv = [globals.subCommand] + globals.subArgs

    # echo back command line globals --------------------------------

    globals.appName = 'magicSack %s' % __version__
    if globals.verbose or globals.justShow:
        print("%s %s" % (globals.appName, __version_date__))

    if globals.verbose or globals.justShow:
        print('appName      = ' + str(globals.appName))
        print('justShow     = ' + str(globals.justShow))
        print('magicDir     = ' + str(magicDir))
        print('subCommand   = ' + str(globals.subCommand))
        print('testing      = ' + str(globals.testing))
        print('verbose      = ' + str(globals.verbose))
        if globals.subArgs:
            for x in globals.subArgs:
                print('  %s' % x)
        # DEBUG
        print("modified sys.argv:")
        for ndx, arg in enumerate(sys.argv):
            print("  %d %s" % (ndx, arg))
        # END

    if globals.justShow:
        sys.exit(0)

    # DEBUG
    sys.exit(0)
    # END

    passPhrase = getpass.getpass('passphrase: ')
    if not passPhrase or passPhrase == '':
        print('you must supply a passphrase')
        sys.exit(1)

    if command   == 'init':
        handleInit(globals, passPhrase)
    else:
        # verifyPassPhrase
        if not verifyPassPhrase(globals, passPhrase):
            print('that was not the right passphrase!')
            sys.exit(1)
        if   command == 'destroy':  handleDestroy(globals)
        elif command == 'add':      handleAdd(globals)
        elif command == 'list':     handleList(globals)
        elif command == 'show':     handleShow(globals)
        elif command == 'drop':     handleDrop(globals)
        elif command == 'addPeer':  handleAddPeer(globals)
        elif command == 'listPeer': handleListPeer(globals)
        elif command == 'dropPeer': handleDropPeer(globals)
        else:
            print(("unrecogized command '%s'" % command))
            sys.exit(1)

if __name__ == '__main__':
    main()

