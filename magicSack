#!/usr/bin/python
#
# ~/dev/py/magicsack/magicSack

from argparse   import ArgumentParser
from magicsack  import *

import getpass, os, sys
from pbkdf2         import crypt, PBKDF2   # note name of package is l/c
from Crypto.Cipher  import AES

def makeListing(args):

    testing     = args.testing
    uDir        = args.uDir
    verbose     = args.verbose

    # XXX STUB XX


def verifyPassPhrase(passPhrase):
    ok = True
    # .magicsack directory must exist
    # XXX STUB XXX
    return ok

def handleInit(passPhrase):
    salt    = os.urandom(8)
    key     = PBKDF2(passPhrase, salt).read(32)     # 32-byte key
    iv      = os.urandom(16)                        # 16-byte IV
    cipher  = AES.new(key, AES.MODE_CBC, iv)
    pp2     = getpass.getpass("Confirm passphrase: ")

    pwHash  = crypt(key)

    # DEBUG
    print "passphrase: %s" % passPhrase
    print "pp2:        %s" % pp2
    print "PW_HASH: %s" % pwHash

    if pp2 != passPhrase:
        print "oh, learn how to type, dummy!"

    # END
    
    DESC = 'initialize magickSack'
    parser = ArgumentParser(description=DESC)
    parser.add_argument('-f', '--force', action='store_true',
        help='overwrite any existing configuration')
    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')
    parser.add_argument('-u', '--uDir', 
        help='path to uDir (relative to tmp/ if testing)')
    parser.add_argument('-v', '--verbose',  action='store_true',
        help='be chatty')
    args = parser.parse_args()
    
    appName = 'magicSack %s' % __version__

    if args.verbose or args.justShow:
        print "%s %s" % (appName, __version_date__)

    if args.verbose or args.justShow:
        # DEBUG
        print "passphrase   = " + str(passPhrase)
        # END
        print 'testing      = ' + str(args.testing)
        print 'uDir         = ' + str(args.uDir)
        print 'verbose      = ' + str(args.verbose)

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    # if everything is OK we write ppHash to $HOME/magicsack/ppHash
    # unless of course we are testing
    
    print('init: not yet implemented')
    sys.exit(0)

def handleDestroy():
    print('destroy: not yet implemented')
    sys.exit(0)

def handleAdd():
    print('add: not yet implemented')
    sys.exit(0)

def handleList():
    print('list: not yet implemented')
    sys.exit(0)

def handleShow():
    print('show: not yet implemented')
    sys.exit(0)

def handleDrop():
    print('drop: not yet implemented')
    sys.exit(0)

def handleAddPeer():
    print('addPeer: not yet implemented')
    sys.exit(0)

def handleListPeer():
    print('listPeer: not yet implemented')
    sys.exit(0)

def handleDropPeer():
    print('dropPeer: not yet implemented')
    sys.exit(0)

def main():
    if len(sys.argv) < 2:
        print("no command present: expect init, destroy, add, ...")
        sys.exit(1)
    command = sys.argv[1]
    if len(sys.argv) == 2:
        sys.argv = sys.argv[0:1]
    else:
        sys.argv = [sys.argv[0]] + sys.argv[2:]

    passPhrase = getpass.getpass('passphrase: ')
    if not passPhrase or passPhrase == '':
        print('you must supply a passphrase')
        sys.exit(1)

    if command   == 'init':         
        handleInit(passPhrase)
    else:
        # verifyPassPhrase
        if not verifyPassPhrase(passPhrase):
            print('that was not the right passphrase!')
            sys.exit(1)
        if command == 'destroy':      handleDestroy()
        elif command == 'add':          handleAdd()
        elif command == 'list':         handleList()
        elif command == 'show':         handleShow()
        elif command == 'drop':         handleDrop()
        elif command == 'addPeer':      handleAddPeer()
        elif command == 'listPeer':     handleListPeer()
        elif command == 'dropPeer':     handleDropPeer()
        else:
            print("unrecogized command '%s'" % command)
            sys.exit(1)

if __name__ == '__main__':
    main()

