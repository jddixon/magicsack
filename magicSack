#!/usr/bin/python3
#
# ~/dev/py/magicsack/magicSack

import binascii
import getpass
import json
import os
import shutil
import sys
from pbkdf2 import PBKDF2       # note name of package is u/c
from Crypto.Cipher import AES
from Crypto.Hash import SHA        # presumably SHA1
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_PSS
from argparse import ArgumentParser

from buildList import BuildList
from nlhtree import NLHTree
from rnglib import SimpleRNG, SystemRNG
from xlattice.crypto import AES_BLOCK_SIZE, addPKCS7Padding, stripPKCS7Padding
from xlattice.u import UDir
from xlattice.ui import confirmYorN, passwdStrength
from magicsack import *


def verifyPassPhrase(globalNS, passPhrase):
    # DEBUG
    #print("entering verifyPassPhrase")
    #print("globalNS is a ", type(globalNS))
    # END
    ok = True
    magicPath = globalNS.magicPath
    if not os.path.exists(magicPath):
        print("%s does not exist; cannot continue" % magicPath)
        sys.exit(1)
    configFile = os.path.join(magicPath, 'cfg.json')
    if not os.path.exists(configFile):
        print("%s does not exist; cannot continue" % configFile)
        sys.exit(1)
    try:
        with open(configFile, 'r') as f:
            data = f.read()
    except Exception as e:
        print("error reading configuration file: %s" % e)
        sys.exit(1)
    try:
        cfg = json.loads(data)
    except Exception as e:
        print("error parsing json configuration file: %s" % e)
        sys.exit(1)
    # DEBUG
    print("CONFIGURATION:")
    print(data)
    # END

    globalNS.hexSalt = cfg['salt']
    globalNS.salt = binascii.a2b_hex(globalNS.hexSalt)
    # DEBUG
    #print("salt as seen by verify:\n    %s" % binascii.b2a_hex(globalNS.salt).decode('utf-8'))
    # END
    globalNS.uPath = cfg['uPath']

    # Read the puzzle file, then check that the salt encrypted there
    # matches the salt in the configuration file.  If it doesn't, the
    # key and therefore the passphrase are wrong.

    pathToPuzzle = os.path.join(magicPath, 'puzzle')
    with open(pathToPuzzle, 'rb') as f:
        puzzle = f.read()
    # DEBUG
    #print("puzzle read from disk (%d bytes):" % len(puzzle))
    #print("%s" % binascii.b2a_hex(puzzle))
    # END
    ok = checkPuzzle(puzzle, passPhrase, globalNS.salt)

    return ok


def handleInit(globalNS, subArgv, passPhrase):

    rng = globalNS.rng
    while True:
        print(("passphrase is %s" % passwdStrength(passPhrase)))
        if confirmYorN('ok to continue? '):
            break
        passPhrase = getpass.getpass('new passphrase: ')
        if not passPhrase or passPhrase == '':
            print('you must supply a passphrase')
            sys.exit(1)

    # Neither the salt nor any IVs need be kept secret.
    salt = bytes(rng.someBytes(16))
    key = bytes(PBKDF2(passPhrase, salt).read(32))     # 32-byte key

    # loop: verify that second passphrase matches first
    pp2 = getpass.getpass("Confirm passphrase: ")
    while pp2 != passPhrase:
        # DEBUG
        print("passphrase: %s" % passPhrase)
        print("pp2:        %s" % pp2)
        # END
        print("second passphrase does not match first passphrase")
        pp2 = getpass.getpass("Confirm passphrase: ")

    # DEBUG
    print("key: %s" % binascii.b2a_hex(key))
    # END

    DESC = 'initialize magickSack'
    parser = ArgumentParser(description=DESC, usage='magicSack init [options]')
    parser.add_argument('-1', '--usingSHA1', action='store_true',
                        help='using SHA1 hash algorithm (default is SHA256)')
    parser.add_argument('-f', '--force', action='store_true',
                        help='overwrite any existing configuration')
    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')
    parser.add_argument('-t', '--title', type=str,
                        help='name of the magic sack (required)')
    parser.add_argument('-u', '--uPath',
                        help='path to uDir (relative to tmp/ if testing)')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')
    args = parser.parse_args(subArgv, namespace=globalNS)

    # fixups
    args.key = key
    args.rng = rng

    appName = globalNS.appName
    defaultDir = globalNS.defaultDir
    magicPath = globalNS.magicPath

    force = args.force
    title = args.title
    uPath = args.uPath
    usingSHA1 = args.usingSHA1
    verbose = args.verbose

    if args.testing:
        rng = SimpleRNG()
        if magicPath == defaultDir:
            magicPath = os.path.join('tmp', '.magicsack')
        else:
            # XXX A MISTAKE:
            magicPath = os.path.join('tmp', '.magicsack')
    else:
        rng = SystemRNG()

    # sanity checks -------------------------------------------------

    # magicPath --------------------------------------------
    parts = magicPath.split('/')
    for part in parts:
        if part == '.' or part == '..':
            print("magicPath '%s' may not contain '%s'" % (magicPath, part))
            sys.exit(1)

    if os.path.exists(magicPath):
        if force:
            shutil.rmtree(magicPath)
        else:
            print('%s already exists, add -f to continue' % magicPath)
            sys.exit(1)
    else:
        os.makedirs(magicPath, mode=0o700, exist_ok=True)

    # title -----------------------------------------------

    if not title or title == '':
        print('please supply a title, a name for your magic sack')
        title = "NO TITLE"       # a hack

    # uDir ------------------------------------------------

    if not uPath or uPath == '':
        uPath = os.path.join(magicPath, 'U')
    args.uPath = uPath

    if os.path.exists(uPath):
        if args.force:
            shutil.rmtree(uPath)
        else:
            print('%s already exists, add -f to continue' % uPath)
            sys.exit(1)
    globalNS.uDir = UDir.discover(uPath, mode=0o700)

    # uPath/tmp --------------------------------------------
    uPathTmp = os.path.join(uPath, 'tmp')
    if os.path.exists(uPathTmp):
        shutil.rmtree(uPathTmp)         # DANGEROUS
    os.makedirs(uPathTmp, mode=0o700)

    # convert salt to something json can handle
    hexSalt = binascii.b2a_hex(salt).decode('utf-8')

    # DEBUG
    print("hexSalt = %s" % hexSalt)
    # END

    # display command line values -----------------------------------
    if verbose:
        print("force        = %s" % force)
        print("magicPath     = %s" % magicPath)
        print("salt         = %s" % hexSalt)
        print("title        = %s" % title)
        print("uPath        = %s" % uPath)
        print("verbose      = %s" % verbose)

    # ACTION --------------------------------------------------------

    # write configuration to magicPath ---------------------
    cfg = {'salt': hexSalt, 'uPath': uPath}
    jCfg = json.dumps(cfg, indent=2, sort_keys=True)
    # DEBUG
    print("JSON: %s" % jCfg)
    # END
    configFile = os.path.join(magicPath, 'cfg.json')
    with open(configFile, 'w') as f:
        f.write(jCfg)

    # write the puzzle file -------------------------------
    puzzle = devisePuzzle(passPhrase, salt, rng)
    pathToPuzzle = os.path.join(magicPath, 'p')
    with open(pathToPuzzle, 'wb') as f:
        f.write(puzzle)

    # DEBUG
    print("puzzle written to %s" % pathToPuzzle)
    # END

    # generate two 2048 bit RSA private keys --------------
    ckPriv = RSA.generate(2048)
    ckPrivPem = ckPriv.exportKey('PEM')

    skPriv = RSA.generate(2048)
    skPrivPem = ckPriv.exportKey('PEM')
    sk = skPriv.publickey()

    # create and populate NLHTree -------------------------
    tree = NLHTree(title, usingSHA1)
    tree.insert(makeNamedValueLeaf(args, '__ckPrivPem__', ckPrivPem))
    tree.insert(makeNamedValueLeaf(args, '__skPrivPem__', skPrivPem))
    args.magicPath = magicPath
    args.sk = sk
    args.skPriv = skPriv
    args.title = title
    args.tree = tree
    writeBuildList(args)


def handleDestroy(globalNS):
    print('destroy: not yet implemented')
    sys.exit(0)


def handleAddFile(globalNS, subArgv):
    """
    Prohibit adding files whose names begin with double-underscore ('__').
    """

    # DEBUG
    print("entering handleAddFile")
    # END

    DESC = 'add something to magickSack'
    parser = ArgumentParser(description=DESC)
    parser.add_argument('-f', '--force', action='store_true',
                        help='overwrite any existing configuration')
    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')
    args = parser.parse_args(namespace=globalNS)

    magicPath = globalNS.magicPath
    verbose = args.verbose

    # echo back command line args -----------------------------------

    appName = 'magicSack %s' % __version__
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('justShow     = ' + str(args.justShow))
        print('magicPath     = ' + str(magicPath))
        print('testing      = ' + str(args.testing))
        print('verbose      = ' + str(verbose))

    if args.justShow:
        sys.exit(0)

    # ACTION --------------------------------------------------------

    # XXX WORKING HERE

    print('add: not yet completelyimplemented')
    sys.exit(0)


def handleListFile(globalNS, subArgv):
    print('list: not yet implemented')
    sys.exit(0)


def handleShowFile(globalNS, subArgv):
    print('show: not yet implemented')
    sys.exit(0)


def handleDropFile(globalNS, subArgv):
    """
    Prohibit deleting files whose names begin with double-underscore ('__')
    """
    print('drop: not yet implemented')
    sys.exit(0)


def handleAddPeer(globalNS, subArgv):
    print('addPeer: not yet implemented')
    sys.exit(0)


def handleListPeer(globalNS, subArgv):
    print('listPeer: not yet implemented')
    sys.exit(0)


def handleDropPeer(globalNS, subArgv):
    print('dropPeer: not yet implemented')
    sys.exit(0)


def main():
    """
    The command line looks like
        magicSack [-m MAGIC_DIR] SUBCMD otherArgs
    So at the top level we peek at sys.argv[1].  If it's '-m' or
    '--magicPath' we will collect it and its parameter here and
    process sys.argv[4:] as subArgv.  Otherwise we process sys.argv[2:]
    as subArgv in the subcommand.
    """

    argv = sys.argv

    defaultDir = os.path.join(os.getenv('HOME'), '.magicsack')
    subCmdAt = 1
    if len(argv) >= 4:
        if argv[1] == '-m' or argv[1] == '--magicPath':
            subCmdAt = 3

    # DEBUG
    print("SUB CMD AT %d" % subCmdAt)
    # END

    DESC = 'command-line interface to the Magic Sack'
    parser = ArgumentParser(description=DESC)
    parser.add_argument('-m', '--magicPath', default=defaultDir, type=str,
                        help='select folder/directory (default=%s)' % defaultDir)
    parser.add_argument('command',          # required
                        help='subCommand to be executed')
    globalNS = parser.parse_args(sys.argv[1: subCmdAt + 1])

    globalNS.appName = 'magicSack %s' % __version__
    globalNS.defaultDir = defaultDir

    globalNS.funcName = 'handle' + globalNS.command.capitalize()
    subArgv = sys.argv[subCmdAt + 1:]

    # DEBUG
    # XXX WIERD OLD CODE
    if globalNS.funcName:
        print("%s is present" % globalNS.funcName)
    else:
        print("%s is NOT present" % globalNS.funcName)
    print("subArgv:")
    for ndx, x in enumerate(subArgv):
        print("  %d %s" % (ndx, x))
    # END

    # fixups
    magicPath = globalNS.magicPath
    globalNS.rng = SystemRNG()

    # DEBUG
    print("magicPath: %s" % magicPath)
    # END

    if not magicPath:
        print("magicPath must be specified")
        sys.exit(1)

    passPhrase = getpass.getpass('passphrase: ')
    if not passPhrase or passPhrase == '':
        print('you must supply a passphrase')
        sys.exit(1)
    globalNS.passPhrase = passPhrase
    command = globalNS.command
    if command == 'init':
        handleInit(globalNS, subArgv, passPhrase)
    else:
        if not verifyPassPhrase(globalNS, passPhrase):
            print('that was not the right passphrase!')
            sys.exit(1)
        globalNS.funcName(globalNS, subArgv)

if __name__ == '__main__':
    main()
