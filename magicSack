#!/usr/bin/python
#
# ~/dev/py/magicsack/magicSack

from argparse   import ArgumentParser
from magicsack  import *

import getpass, os, sys
from pbkdf2         import crypt, PBKDF2   # note name of package is l/c
from Crypto.Cipher  import AES

def makeListing(args):

    # this is here because assignment of args.uDir to None fails
    if args.uDir and args.uDir != "":
        uDir = args.uDir
    else:
        uDir = None

    testing     = args.testing
    uDir        = args.uDir
    verbose     = args.verbose

    # XXX STUB XX

def reinit(args, passPhrase):
        salt    = os.urandom(8)
        key     = PBKDF2(passPhrase, salt).read(32)     # 32-byte key
        iv      = os.urandom(16)                    # 16-byte IV
        cipher  = AES.new(key, AES.MODE_CBC, iv)
        pp2     = getpass.getpass("Confirm passphrase: ")

        pwHash  = crypt(key)

        # DEBUG
        print "PW_HASH: " + pwHash
        print "PW_HASH: %s" % pwHash

        if pp2 != passPhrase:
            print "oh, learn how to type, dummy!"

        # END

        # if everything is OK we write ppHash to /var/app/magicSack/ppHash,
        # unless of course we are testing

def verifyPassPhrase(args, passPhrase):
    # apps directory must exist
    # XXX STUB XXX
    pass

def main():
    """
    Expect a command like
        magicSack [options] 

    """

    passPh = getpass.getpass('Passphrase: ')
    if not passPh or passPh == '':
        print 'you must supply a passphrase'
        sys.exit(1)
    # DEBUG
    # END
    
    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------
    
    DESC = 'utility for managing (possibly distributed) encrypted files'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-i', '--initializing', action='store_true',
        help='changing passphrase')

    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')

    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')

    parser.add_argument('-u', '--uDir', 
        help='path to uDir (relative to tmp/ if testing)')

    parser.add_argument('-v', '--verbose', action='store_true',
        help='be chatty')

    args = parser.parse_args()

    # reinitializing ------------------------------------------------
    if args.initializing:
        reinit(args, passPh)
    else:
        verifyPassPhrase(args, passPh)
    # otherwise, apps directory must exist
    # XXX STUB XXX

    # fixups --------------------------------------------------------

    # sanity checks -------------------------------------------------

    # fixups --------------------------------------------------------

    # uDir ------------------------------------------------
    if args.testing and args.uDir:
        if args.uDir[0] == '/':
            args.uDir = args.uDir[1:]
        args.uDir = os.path.join('tmp', args.uDir)

    # complete setup ------------------------------------------------
    appName = 'magicSack %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print "%s %s" % (appName, __version_date__)

    if args.verbose or args.justShow:
        print 'testing      = ' + str(args.testing)
        print 'uDir         = ' + str(args.uDir)
        print 'verbose      = ' + str(args.verbose)

        # DEBUG
        # END
        print "passphrase   = " + str(passPh)

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    makeListing(args)

        
if __name__ == '__main__':
    main()

