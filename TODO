~/dev/py/magicksack/TODO

2016-05-11
    * modify to use U_16 or U_FLAT 

2015-09-06
    * read codahale.com/how-to-safely-store-a-password again
        - written 2010-01-31, updated 2011-02-24
    * then read www.unlimitednovelty.com/2012/03/dont-use-bcrypt.html
        agaidn

2015-06-12 
    * restructure magicSack so that top argparse level has only
        one option (-m/--magicDir) and subcommands have multiple
        arguments
        - get init running again
        - get add working at least to a degree

2015-06-12
    * crashes if title (-t) is not specified

2015-06-02
    * G: technical description is incorrect
    * G: command line description is wrong
    * G: there should be a link to buildList, which is used here
    * G: add a project status section; this should make it clear that
         it's currently in development

2015-05-31
    * readBuildList once NLHTree.find() is working

2015-05-28
    * verify is getting incorrect PKCS7 padding error, line 68
        in __init__.py, which calls line 66 in xlattice/crypto.py
        - testPuzzle.py succeeds

2015-05-28
    * BUG IN ARGPARSE: subcommands cannot include options
        if the primary command (magicSack in this case) has an
        option with a variable number of arguments (the subArgs)

2015-05-26
    * modify magicSack to include a global argparser which handles
        -m/--magicDir and -T/--testing
        with these (and other selected args) being collected as 
        a globals list;
    * the command line is then reconstituted with these omitted

2015-05-18 (includes edited bits from -05-13)
    INIT
    * need to generate two RSA 2048-bit private keys in PEM format		* DONE
        (skPriv and ckPriv)		                                        * DONE
    * these get AES-encrypted using the user's AES key and written		* DONE
        to .magicsack -- that is, to uDir		                        * DONE
        - these adds initialize the BuildList		                    * DONE
    * need routine to generate build list, encrypt it, and write it
        to disk
    * and the reverse function to read the build list from disk,
        decrypt it
        - this needs to be done with care, because the only mapping
            from file names to disk representation is the BuildList

    ADD
    * need library functions 
        - login using passphrase, from which system determines key
        - read existing BuildList
    * create copy of BUildList
    * find the file(s) being added, encrypt each, add to uDir, 
        updating copy with each operation
    * encrypt new BuildList, write to disk, rename the files so 
        replacement is semi-atomic operation

    LIST
    * login, get key, read BuildList as above
    * display as required
    * no further interaction with store


2014-10-02
    * consider option to store in S3
