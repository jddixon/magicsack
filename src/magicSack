#!/usr/bin/python3
# ~/dev/py/magicsack/magicSack

""" Tool for Managing secret stuff. """

import binascii
import getpass
import json
import shutil
import sys
import time
from argparse import ArgumentParser

import os
try:
    from os import scandir
except ImportError:
    from scandir import scandir

from pbkdf2 import PBKDF2       # note name of package is u/c
# from Crypto.Cipher import AES
# from Crypto.Hash import SHA        # presumably SHA1
from Crypto.PublicKey import RSA
# from Crypto.Signature import PKCS1_PSS

# from buildlist import BuildList
from nlhtree import NLHTree
from optionz import dump_options
from rnglib import SimpleRNG, SystemRNG
from xlattice import HashTypes
from xlattice.u import UDir
from xlattice.ui import confirm_y_or_n, passwd_strength
from magicsack import(__version__, __version_date__,
                      check_puzzle, devise_puzzle, make_named_value_leaf,
                      name_from_title, write_build_list)


def verify_pass_phrase(global_ns, pass_phrase):
    """ Verify that the user has supplied the correct password. """

    # DEBUG
    #print("entering verify_pass_phrase")
    #print("global_ns is a ", type(global_ns))
    # END
    ok_ = True
    magic_path = global_ns.magic_path
    if not os.path.exists(magic_path):
        print("%s does not exist; cannot continue" % magic_path)
        sys.exit(1)
    config_file = os.path.join(magic_path, 'cfg.json')
    if not os.path.exists(config_file):
        print("%s does not exist; cannot continue" % config_file)
        sys.exit(1)
    with open(config_file, 'r') as file:
        # let any exceptions bubble up
        data = file.read()
    try:
        cfg = json.loads(data)
    except Exception as exc:
        print("error parsing json configuration file: %s" % exc)
        sys.exit(1)
    # DEBUG
    print("CONFIGURATION:")
    print(data)
    # END

    global_ns.hex_salt = cfg['salt']
    global_ns.salt = binascii.a2b_hex(global_ns.hex_salt)
    # DEBUG
    #print("salt as seen by verify:\n    %s" % binascii.b2a_hex(global_ns.salt).decode('utf-8'))
    # END
    global_ns.u_path = cfg['u_path']

    # Read the puzzle file, then check that the salt encrypted there
    # matches the salt in the configuration file.  If it doesn't, the
    # key and therefore the passphrase are wrong.

    path_to_puzzle = os.path.join(magic_path, 'p')
    with open(path_to_puzzle, 'rb') as file:
        puzzle = file.read()
    # DEBUG
    #print("puzzle read from disk (%d bytes):" % len(puzzle))
    #print("%s" % binascii.b2a_hex(puzzle))
    # END
    ok_, _ = check_puzzle(puzzle, pass_phrase, global_ns.salt)

    return ok_

# == init ===========================================================


def handle_init(global_ns, sub_argv, pass_phrase):
    """ Execute the init subcommand. """

    rng = global_ns.rng
    while True:
        print(("passphrase is %s" % passwd_strength(pass_phrase)))
        if confirm_y_or_n('ok to continue? '):
            break
        pass_phrase = getpass.getpass('new passphrase: ')
        if not pass_phrase or pass_phrase == '':
            print('you must supply a passphrase')
            sys.exit(1)

    # Neither the salt nor any IVs need be kept secret.
    salt = bytes(rng.some_bytes(16))
    key = bytes(PBKDF2(pass_phrase, salt).read(32))     # 32-byte key

    # loop: verify that second passphrase matches first
    pp2 = getpass.getpass("Confirm passphrase: ")
    while pp2 != pass_phrase:
        # DEBUG
        print("passphrase: %s" % pass_phrase)
        print("pp2:        %s" % pp2)
        # END
        print("second passphrase does not match first passphrase")
        pp2 = getpass.getpass("Confirm passphrase: ")

    # DEBUG
    print("key: %s" % binascii.b2a_hex(key))
    # END

    desc = 'initialize magickSack'
    parser = ArgumentParser(description=desc, usage='magicSack init [options]')
    parser.add_argument('-H', '--hashtype', choices=[1, 2, 3], default=2,
                        help='using SHA1 hash algorithm (default is SHA256)')
    parser.add_argument('-f', '--force', action='store_true',
                        help='overwrite any existing configuration')
    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')
    parser.add_argument('-t', '--title', type=str,
                        help='name of the magic sack (required)')
    parser.add_argument('-u', '--u_path',
                        help='path to uDir (relative to tmp/ if testing)')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')
    args = parser.parse_args(sub_argv, namespace=global_ns)

    # fixups
    args.key = key
    args.rng = rng

    app_name = global_ns.app_name
    default_dir = global_ns.default_dir
    magic_path = global_ns.magic_path

    force = args.force
    title = args.title
    u_path = args.u_path
    hashtype = args.hashtype
    verbose = args.verbose

    if args.testing:
        rng = SimpleRNG(time.time())
        if magic_path == default_dir:
            magic_path = os.path.join('tmp', '.magicsack')
        else:
            # XXX A MISTAKE:
            magic_path = os.path.join('tmp', '.magicsack')
    else:
        rng = SystemRNG()

    # sanity checks -------------------------------------------------

    # magic_path --------------------------------------------
    parts = magic_path.split('/')
    for part in parts:
        if part == '.' or part == '..':
            print("magic_path '%s' may not contain '%s'" % (magic_path, part))
            sys.exit(1)

    if os.path.exists(magic_path):
        if force:
            shutil.rmtree(magic_path)
        else:
            print('%s already exists, add -f to continue' % magic_path)
            sys.exit(1)
    else:
        os.makedirs(magic_path, mode=0o700, exist_ok=True)

    # title -----------------------------------------------

    if not title or title == '':
        print('please supply a title, a name for your magic sack')
        title = "NO_TITLE"       # a hack

    # uDir ------------------------------------------------

    if not u_path or u_path == '':
        u_path = os.path.join(magic_path, 'U')
    args.u_path = u_path

    if os.path.exists(u_path):
        if args.force:
            shutil.rmtree(u_path)
        else:
            print('%s already exists, add -f to continue' % u_path)
            sys.exit(1)
    global_ns.u_dir = UDir.discover(u_path, mode=0o700)

    # u_path/tmp --------------------------------------------
    u_path_tmp = os.path.join(u_path, 'tmp')
    if os.path.exists(u_path_tmp):
        shutil.rmtree(u_path_tmp)         # DANGEROUS
    os.makedirs(u_path_tmp, mode=0o700)

    # convert salt to something json can handle
    hex_salt = binascii.b2a_hex(salt).decode('utf-8')

    # DEBUG
    print("hex_salt = %s" % hex_salt)
    # END

    # display command line values -----------------------------------
    if verbose:
        print("force        = %s" % force)
        print("magic_path   = %s" % magic_path)
        print("salt         = %s" % hex_salt)
        print("title        = %s" % title)
        print("u_path       = %s" % u_path)
        print("verbose      = %s" % verbose)

    # ACTION --------------------------------------------------------

    # write configuration to magic_path ---------------------
    cfg = {'salt': hex_salt, 'u_path': u_path}
    json_cfg = json.dumps(cfg, indent=2, sort_keys=True)
    # DEBUG
    print("JSON: %s" % json_cfg)
    # END
    config_file = os.path.join(magic_path, 'cfg.json')
    with open(config_file, 'w') as file:
        file.write(json_cfg)

    # write the puzzle file -------------------------------
    puzzle = devise_puzzle(pass_phrase, salt, rng)
    path_to_puzzle = os.path.join(magic_path, 'p')
    with open(path_to_puzzle, 'wb') as file:
        file.write(puzzle)

    # DEBUG
    print("puzzle written to %s" % path_to_puzzle)
    # END

    # generate two 2048 bit RSA private keys --------------
    ck_priv = RSA.generate(2048)
    ck_priv_pem = ck_priv.exportKey('PEM')

    sk_priv = RSA.generate(2048)
    sk_priv_pem = ck_priv.exportKey('PEM')
    sk_ = sk_priv.publickey()

    # create and populate NLHTree -------------------------
    tree = NLHTree(name_from_title(title), hashtype)
    tree.insert(make_named_value_leaf(args, '__ck_priv_pem__', ck_priv_pem))
    tree.insert(make_named_value_leaf(args, '__sk_priv_pem__', sk_priv_pem))
    args.magic_path = magic_path
    args.sk = sk_
    args.sk_priv = sk_priv
    args.title = title
    args.tree = tree
    write_build_list(args)

# == destroy ========================================================


BLOCKSIZE = 4096
CHAR = 0x74
COMP = 0xff & (~CHAR)


def handle_destroy(global_ns, sub_argv):
    """ Execute the destroy subcommand. """

    desc = 'erasing magickSack data from this machine'
    parser = ArgumentParser(description=desc, usage='magicSack init [options]')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')
    parser.add_argument('-q', '--quietly', action='store_true',
                        help='talk as little as possible')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')
    args = parser.parse_args(sub_argv, namespace=global_ns)

    if args.verbose or args.just_show:
        print("just_show   = %s" % args.just_show)
        print("magic_path  = %s" % args.magic_path)   # DEBUG
        print("testing    = %s" % args.testing)
        print("quietly    = %s" % args.quietly)
        print("verbose    = %s" % args.verbose)
    if args.just_show:
        sys.exit(0)

    # get user confirmation
    prompt = "thoroughly delete your magicSack files? [yes/No] "
    while True:
        whether = input(prompt).capitalize()
        if not whether or whether[0] == 'N':
            sys.exit(0)
        elif whether[0] == 'Y':
            break
        else:
            print("please answer Y or N")

    # recursively scrub files and delete containing diretories

    # for each directoy
    #     for each file: get filesize, round up to multiple of 4 KB;
    #         for ecah block
    #             overwrite block with char, flush;
    #             overwrite with complement, flush;
    #             overwrite with random; flush;
    #         then delete the file
    #     then delete the directory

    quietly = args.quietly

    chars = bytes([CHAR for i in range(BLOCKSIZE)])
    comps = bytes([COMP for i in range(BLOCKSIZE)])
    rnd = SimpleRNG(time.time()).someBytes(BLOCKSIZE)

    def scrub_file(path_to_file):
        """
        Overwrite a file several times, then delete it (following the
        Federal standard).
        """
        info = os.stat(path_to_file)
        length = info.st_size
        count = int(0.000001 + (length + BLOCKSIZE - 1) / BLOCKSIZE)
        with open(path_to_file, 'wb') as file:
            for _ in range(count):
                file.write(chars)
                file.flush()
        with open(path_to_file, 'wb') as file:
            for _ in range(count):
                file.write(comps)
                file.flush()
        with open(path_to_file, 'wb') as file:
            for _ in range(count):
                file.write(rnd)
                file.flush()
        os.remove(path_to_file)
        if not args.quietly:
            print("file %s has been scrubbed" % path_to_file)

    def scrub_dir(path_to_dir):
        """
        Scrub = overwrite and delete every file in a directory.
        """
        if not quietly:
            print("scrubbing %s" % global_ns.magic_path)
        for entry in scandir(path_to_dir):
            if entry.is_dir():
                scrub_dir(entry.path)
            elif entry.is_file():
                scrub_file(entry.path)
            elif entry.is_symlink():
                os.unlink(entry.path)
            else:
                print("don't know how to handle %s" % entry.path)
        if not quietly:
            print("directory %s scrubbed" % path_to_dir)
        shutil.rmtree(path_to_dir)

    scrub_dir(global_ns.magic_path)

    sys.exit(0)

# == addFile ========================================================


def handle_add_file(global_ns, sub_argv):
    """
    Prohibit adding files whose names begin with double-underscore ('__').
    """

    # DEBUG
    print("entering handle_add_file")
    # END

    desc = 'add something to magickSack'
    parser = ArgumentParser(description=desc)
    parser.add_argument('-f', '--force', action='store_true',
                        help='overwrite any existing configuration')
    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')
    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')
    args = parser.parse_args(namespace=global_ns)

    magic_path = global_ns.magic_path
    verbose = args.verbose

    # echo back command line args -----------------------------------

    app_name = 'magicSack %s' % __version__
    if args.verbose or args.just_show:
        print("%s %s" % (app_name, __version_date__))

    if args.verbose or args.just_show:
        print('just_show     = ' + str(args.just_show))
        print('magic_path     = ' + str(magic_path))
        print('testing      = ' + str(args.testing))
        print('verbose      = ' + str(verbose))

    if args.just_show:
        sys.exit(0)

    # ACTION --------------------------------------------------------

    # XXX WORKING HERE

    print('add: not yet completely implemented')
    sys.exit(0)


# == listFile =======================================================

def handle_list_file(global_ns, sub_argv):
    """ Execute the listFile command. """
    print('list: not yet implemented')
    sys.exit(0)


# == showFile ======================================================

def handle_show_file(global_ns, sub_argv):
    """ Execute the showFile command. """
    print('show: not yet implemented')
    sys.exit(0)


# == dropFile =======================================================

def handle_drop_file(global_ns, sub_argv):
    """
    Handle the dropFile command, remembering to prohibit deleting files
    whose names begin with double-underscore ('__').
    """
    print('drop: not yet implemented')
    sys.exit(0)

# == addPeer ========================================================


def handle_add_peer(global_ns, sub_argv):
    """ Execute the addPeer command. """

    print('addPeer: not yet implemented')
    sys.exit(0)


# == listPeer =======================================================

def handle_list_peer(global_ns, sub_argv):
    """ Execute the listPeer command. """

    print('listPeer: not yet implemented')
    sys.exit(0)


# == dropPeer =======================================================

def handle_drop_peer(global_ns, sub_argv):
    """ Execute the dropPeer command. """

    print('dropPeer: not yet implemented')
    sys.exit(0)


# == main ===========================================================

def main():
    """
    The command line looks like
        magicSack [-m MAGIC_DIR] SUBCMD otherArgs
    So at the top level we peek at sys.argv[1].  If it's '-m' or
    '--magic_path' we will collect it and its parameter here and
    process sys.argv[4:] as sub_argv.  Otherwise we process sys.argv[2:]
    as sub_argv in the subcommand.
    """

    func_map = {
        'init': handle_init,
        'destroy': handle_destroy,
        'addFile': handle_add_file,
        'listFile': handle_list_file,
        'showFile': handle_show_file,
        'dropFile': handle_drop_file,
        'addPeer': handle_add_peer,
        'listPeer': handle_list_peer,
        'dropPeer': handle_drop_peer,
    }
    argv = sys.argv

    default_dir = os.path.join(os.getenv('HOME'), '.magicsack')
    sub_cmd_at = 1
    if len(argv) >= 4:
        if argv[1] == '-m' or argv[1] == '--magic_path':
            sub_cmd_at = 3

    # DEBUG
    print("SUB CMD AT %d" % sub_cmd_at)
    # END

    desc = 'command-line interface to the Magic Sack'
    parser = ArgumentParser(description=desc)
    parser.add_argument('-m', '--magic_path', default=default_dir, type=str,
                        help='select folder/directory (default=%s)' % default_dir)
    parser.add_argument('command',          # required
                        help='subCommand to be executed')
    global_ns = parser.parse_args(sys.argv[1: sub_cmd_at + 1])

    global_ns.app_name = 'magicSack %s' % __version__
    global_ns.default_dir = default_dir

    sub_argv = sys.argv[sub_cmd_at + 1:]

    # DEBUG
    print("sub_argv:")
    for ndx, txt in enumerate(sub_argv):
        print("  %d %s" % (ndx, txt))
    # END

    # fixups
    magic_path = global_ns.magic_path
    global_ns.rng = SystemRNG()

    # DEBUG
    print("magic_path: %s" % magic_path)
    # END

    if not magic_path:
        print("magic_path must be specified")
        sys.exit(1)

    pass_phrase = getpass.getpass('passphrase: ')
    if not pass_phrase or pass_phrase == '':
        print('you must supply a passphrase')
        sys.exit(1)
    global_ns.pass_phrase = pass_phrase
    command = global_ns.command
    if command == 'init':
        handle_init(global_ns, sub_argv, pass_phrase)
    else:
        if not verify_pass_phrase(global_ns, pass_phrase):
            print('that was not the right passphrase!')
            sys.exit(1)
        func_map[command](global_ns, sub_argv)


if __name__ == '__main__':
    main()
